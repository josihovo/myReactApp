{"version":3,"sources":["reducers/customerReducer.js","actions/customerActions.js","actions/albumActions.js","reducers/albumReducer.js","reducers/commentReducer.js","actions/commentActions.js","actions/almacenActions.js","reducers/almacenReducer.js","reducers/index.js","components/home.js","components/about.js","components/dash.js","containers/Album.js","containers/Comment.js","containers/Almacen.js","App.js","serviceWorker.js","index.js"],"names":["initialState","items","loading","error","customerReducer","state","action","type","payload","registros","fetchAlbumsSuccess","fetchAlbumsFailure","albumReducer","commentReducer","fetchAlmacenSuccess","fetchAlmacenFailure","setMode","valor","mode","almacenReducer","combineReducers","customers","albums","comments","almacenes","Home","className","href","About","Dash","React","Component","Album","props","isToggleOn","handleClick","bind","this","getAlbums","fetchCustomers","getToDos","setState","lista","clearAlbums","message","map","x","key","id","name","onClick","title","mapDispatchs","dispatch","fetch","then","res","json","catch","response","console","log","connect","Comment","getComentarios","comentarios","clearComentarios","node","waves","right","email","fetchCommentsFailure","Almacen","handleInputChange","event","target","value","guardar","e","preventDefault","reg","clave","nombre","area","addAlmacen","updateAlmacen","modoNuevo","cancelar","editar","item","getAlmacenes","deleteAlmacen","modoRecorrido","data-field","left","onChange","placeholder","mapDispatch","registro","request","method","headers","body","JSON","stringify","App","Fragment","alignLinks","brand","menuIcon","options","draggable","edge","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","outDuration","preventScrolling","exact","path","Boolean","window","location","hostname","match","store","createStore","reducer","applyMiddleware","thunk","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fdd712be.chunk.js","sourcesContent":["import { \r\n    FETCH_CUSTOMERS_BEGIN, \r\n    FECTH_CUSTOMERS_SUCCESS,\r\n    FETCH_CUSTOMERS_FAILURE\r\n  } from '../actions/customerActions'\r\n\r\n  const initialState= {\r\n     items:[],\r\n     loading:false,\r\n     error:null \r\n  }\r\n\r\n\r\n  const customerReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n       case FETCH_CUSTOMERS_BEGIN:\r\n           return {\r\n               ...state, \r\n               loading: true,\r\n               error: null\r\n            };\r\n\r\n        case FECTH_CUSTOMERS_SUCCESS:\r\n            return {\r\n                ...state, \r\n                loading: false, \r\n                items: action.payload.registros\r\n            };\r\n        case FETCH_CUSTOMERS_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error,\r\n                items: []\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n  }\r\n\r\n\r\n  export default customerReducer;  ","export const FETCH_CUSTOMERS_BEGIN   = 'FETCH_CUSTOMERS_BEGIN';\r\nexport const FECTH_CUSTOMERS_SUCCESS = 'FECTH_CUSTOMERS_SUCCESS';\r\nexport const FETCH_CUSTOMERS_FAILURE = 'FETCH_CUSTOMERS_FAILURE';\r\n\r\n\r\nexport const fetchCustomersBegin = () => ({\r\n    type: FETCH_CUSTOMERS_BEGIN\r\n});\r\n \r\n\r\nexport const fetchCustomersSuccess = registros => ({\r\n    type: FECTH_CUSTOMERS_SUCCESS,\r\n    payload: { registros }\r\n});\r\n\r\n\r\nexport const fetchCustomersFailure = error => ({\r\n    type: FETCH_CUSTOMERS_FAILURE,\r\n    payload: { error }\r\n});\r\n\r\n\r\nexport const fetchCustomers = () => {\r\n\r\n    return (dispatch) => {\r\n\r\n        dispatch(fetchCustomersBegin());\r\n\r\n        return fetch('https://jsonplaceholder.typicode.com/users').then( response => response.json(),  error => console.log('un error ocurrio',error))\r\n                                                                  .then((json) => { dispatch(fetchCustomersSuccess(json)); })\r\n    }\r\n};\r\n\r\n \r\n  ","export const FETCH_ALBUMS_BEGIN  = 'FETCH_ALBUMS_BEGIN';\r\nexport const FETCH_ALBUMS_SUCCESS = 'FETCH_ALBUMS_SUCCESS';\r\nexport const FETCH_ALBUMS_FAILURE = 'FETCH_ALBUMS_FAILURE';\r\nexport const CLEAR_ALBUMS = 'CLEAR_ALBUMS';\r\n\r\n\r\nexport const fetchAlbumsBegin = () => ({\r\n    type: FETCH_ALBUMS_BEGIN\r\n});\r\n\r\n\r\nexport const fetchAlbumsSuccess = registros => ({\r\n    type: FETCH_ALBUMS_SUCCESS,\r\n    payload: { registros }\r\n});\r\n\r\n\r\nexport const fetchAlbumsFailure = error => ({\r\n    type: FETCH_ALBUMS_FAILURE,\r\n    payload: { error } \r\n});\r\n\r\n\r\nexport const getAlbums = () => {\r\n    return (dispatch) => {\r\n\r\n        dispatch(fetchAlbumsBegin());\r\n\r\n        return fetch ('https://jsonplaceholder.typicode.com/albums')\r\n        .then (res => res.json())\r\n        .then( json =>   dispatch(fetchAlbumsSuccess(json)  ))\r\n        .catch( error => dispatch(fetchAlbumsFailure(error) ));\r\n    }\r\n};\r\n\r\n\r\nexport const getToDos = () => {\r\n    return (dispatch) => {\r\n\r\n        dispatch(fetchAlbumsBegin());\r\n\r\n        return fetch ('https://jsonplaceholder.typicode.com/todos')\r\n        .then (res => res.json())\r\n        .then( json =>   dispatch(fetchAlbumsSuccess(json)  ))\r\n        .catch( error => dispatch(fetchAlbumsFailure(error) ));\r\n    }\r\n};\r\n\r\n\r\n \r\n \r\nexport const clearAlbums = () => ({ type: CLEAR_ALBUMS }); ","import {\r\n    FETCH_ALBUMS_BEGIN,\r\n    FETCH_ALBUMS_SUCCESS,\r\n    FETCH_ALBUMS_FAILURE, \r\n    CLEAR_ALBUMS\r\n} from '../actions/albumActions'\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst albumReducer = (state = initialState, action) =>{\r\n\r\n    switch(action.type){\r\n        case FETCH_ALBUMS_BEGIN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            };\r\n\r\n        case FETCH_ALBUMS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                items: action.payload.registros\r\n            };\r\n        \r\n        case FETCH_ALBUMS_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error,\r\n                items:[]\r\n            };\r\n        \r\n        case CLEAR_ALBUMS:\r\n            return {\r\n                ...state,\r\n                items:[]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default albumReducer;","import { \r\n    FETCH_COMMENTS_BEGIN,\r\n    FETCH_COMMENTS_SUCCESS,\r\n    FETCH_COMMENTS_FAILURE,\r\n    CLEAR_COMMENTS    \r\n  } from '../actions/commentActions'\r\n\r\n  const initialState = {\r\n      items :[],\r\n      loading: false,\r\n      error: null\r\n  };\r\n\r\n\r\n  const commentReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type){\r\n        case FETCH_COMMENTS_BEGIN:\r\n            return {\r\n              ...state,\r\n              loading:true,\r\n              error:null  \r\n            };\r\n\r\n        case  FETCH_COMMENTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                items: action.payload.registros\r\n            };\r\n\r\n        case  FETCH_COMMENTS_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading:false,\r\n                error: action.payload.error,\r\n                items:[]\r\n            };\r\n\r\n        case CLEAR_COMMENTS:\r\n            return {\r\n                ...state,\r\n                items:[]\r\n            };\r\n        default:\r\n             return state;\r\n    }\r\n\r\n  }\r\n\r\n  export default commentReducer;","export const FETCH_COMMENTS_BEGIN = 'FETCH_COMMENTS_BEGIN'\r\nexport const FETCH_COMMENTS_SUCCESS = 'FETCH_COMMENTS_SUCCESS'\r\nexport const FETCH_COMMENTS_FAILURE = 'FETCH_COMMENTS_FAILURE'\r\nexport const CLEAR_COMMENTS  = 'CLEAR_ALBUMS'\r\n\r\n\r\n\r\nexport const fetchCommentsBegin = () => ({\r\n    type: FETCH_COMMENTS_BEGIN\r\n});\r\n\r\n\r\nexport const fetchCommentsSuccess = registros => ({\r\n    type: FETCH_COMMENTS_SUCCESS,\r\n    payload: { registros }\r\n});\r\n\r\n\r\nexport const fetchCommentsFailure = error => ({\r\n    type: FETCH_COMMENTS_FAILURE,\r\n    payload: { error }\r\n});\r\n\r\n\r\nexport const getComentarios = () => {\r\n    return (dispatch) => {\r\n     \r\n        dispatch(fetchCommentsBegin());\r\n\r\n        return fetch ('https://jsonplaceholder.typicode.com/comments')\r\n                .then ( res => res.json())\r\n                .then ( json => dispatch(fetchCommentsSuccess (json)))\r\n                .catch ( error =>  dispatch(fetchCommentsFailure (error)));\r\n\r\n    }\r\n};\r\n\r\n\r\nexport const clearComentarios = () => ({ type: CLEAR_COMMENTS });","export const FETCH_ALMACEN_BEGIN = 'FETCH_ALMACEN_BEGIN'\r\nexport const FETCH_ALMACEN_SUCCESS = 'FETCH_ALMACEN_SUCCESS'\r\nexport const FETCH_ALMACEN_FAILURE = 'FETCH_ALMACEN_FAILURE'\r\nexport const SET_MODE = 'SET_MODE'\r\n\r\n \r\n//actions\r\nconst fetchAlmacenBegin = () => ({\r\n    type: FETCH_ALMACEN_BEGIN\r\n})\r\n\r\n\r\nconst fetchAlmacenSuccess = registros => ({\r\n    type: FETCH_ALMACEN_SUCCESS,\r\n    payload: { registros }\r\n})\r\n\r\n\r\nconst fetchAlmacenFailure = error => ({\r\n    type: FETCH_ALMACEN_FAILURE,\r\n    payload: { error }\r\n})\r\n\r\n\r\nexport const setMode = valor => ({\r\n    type: SET_MODE,\r\n    payload: { valor }\r\n})\r\n\r\n \r\n\r\n\r\nexport const getAlmacenes = () => {\r\n\r\n    return (dispatch) => {\r\n\r\n        dispatch(fetchAlmacenBegin());        \r\n        \r\n        return fetch('http://localhost:1337/api/products',)\r\n        .then (res => res.json())\r\n        .then ( json => dispatch(fetchAlmacenSuccess(json) ))\r\n        .catch( error => dispatch( fetchAlmacenFailure(error) ))\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const addAlmacen = (registro) => {\r\n    return (dispatch) => {\r\n\r\n        const request = {\r\n            method:'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                clave: registro.clave,\r\n                nombre: registro.nombre,\r\n                area: registro.area\r\n            })\r\n        };\r\n\r\n         return fetch ('http://localhost:1337/api/products', request)\r\n            .then( res => {                \r\n\r\n                dispatch(setMode('R'));\r\n\r\n                fetch('http://localhost:1337/api/products')\r\n                    .then (res => res.json())\r\n                    .then ( json => dispatch(fetchAlmacenSuccess(json) ))\r\n                    .catch( error => dispatch( fetchAlmacenFailure(error) ))\r\n                })            \r\n            .catch( error => dispatch( fetchAlmacenFailure(error) ))\r\n\r\n\r\n\r\n    }\r\n}\r\n \r\n\r\n\r\nexport const updateAlmacen = (registro) => {\r\n    return (dispatch) => {\r\n\r\n        const request = {\r\n            method:'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                clave: registro.clave,\r\n                nombre: registro.nombre,\r\n                area: registro.area\r\n            })\r\n        };\r\n\r\n        return fetch ('http://localhost:1337/api/products/'+ registro.id, request)\r\n                .then ( res => {\r\n                    dispatch(setMode('R'));\r\n\r\n                    fetch('http://localhost:1337/api/products')\r\n                    .then (res => res.json())\r\n                    .then( json => dispatch(fetchAlmacenSuccess(json) ))\r\n                    .catch( error => dispatch(fetchAlmacenFailure(error)))\r\n                })\r\n                .catch( error => dispatch(fetchAlmacenFailure(error)))\r\n            \r\n\r\n    }    \r\n}\r\n\r\n\r\n\r\nexport const deleteAlmacen = ( id ) => {\r\n    return (dispatch) => {\r\n\r\n        const request = {\r\n            method:'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n            return fetch ('http://localhost:1337/api/products/'+ id, request)\r\n            .then ( res => {\r\n                fetch('http://localhost:1337/api/products')\r\n                .then( res => res.json())\r\n                .then ( json => dispatch(fetchAlmacenSuccess(json) ))\r\n                .catch( error => dispatch(fetchAlmacenFailure(error) ))\r\n            })\r\n            .catch ( error => dispatch (fetchAlmacenFailure(error) ))\r\n\r\n    }    \r\n}\r\n\r\n\r\n ","import {\r\n    FETCH_ALMACEN_BEGIN,\r\n    FETCH_ALMACEN_SUCCESS,\r\n    FETCH_ALMACEN_FAILURE,    \r\n    SET_MODE\r\n} from '../actions/almacenActions'\r\n\r\nconst initialState = {\r\n    items:[],\r\n    loading: false,\r\n    error: null, \r\n    mode: 'R',\r\n};\r\n\r\nconst almacenReducer = (state=initialState, action) => {\r\n    switch (action.type){\r\n        case FETCH_ALMACEN_BEGIN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            };\r\n        case FETCH_ALMACEN_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading: false,\r\n                items: action.payload.registros\r\n            };\r\n        case FETCH_ALMACEN_FAILURE: \r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error,\r\n                items:[]\r\n            };\r\n        case SET_MODE:\r\n            return {\r\n                ...state,\r\n                mode: action.payload.valor\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n};\r\n\r\nexport default almacenReducer;\r\n","import { combineReducers } from 'redux'\r\nimport customers from './customerReducer'\r\nimport albums from './albumReducer'\r\nimport comments from './commentReducer'\r\nimport almacenes from './almacenReducer'\r\n\r\nexport default combineReducers ({\r\n    customers,\r\n    albums,\r\n    comments,\r\n    almacenes,\r\n});","import React from 'react'\r\nimport '../css/Home.css'\r\n\r\n\r\nconst Home = () => (\r\n\r\n  <div  >\r\n<div className=\"icon-bar\">\r\n  <a className=\"active\" href=\"/\"><i className=\"fa fa-home\"></i></a>\r\n  <a href=\"/\"><i className=\"fa fa-search\"></i></a>\r\n  <a href=\"/\"><i className=\"fa fa-envelope\"></i></a>\r\n  <a href=\"/\"><i className=\"fa fa-globe\"></i></a>\r\n  <a href=\"7\"><i className=\"fa fa-trash\"></i></a>\r\n</div>\r\n           \r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n\r\n","import React from 'react'\r\n\r\nconst About = () => (\r\n\r\n  <div  >\r\n    about us\r\n  </div>\r\n);\r\n\r\nexport default About;\r\n\r\n","/*import React from 'react'\r\n\r\n\r\nconst Dash = () => (\r\n\r\n  <div>\r\n    Dashboard\r\n  </div>\r\n);\r\n\r\nexport default Dash;\r\n\r\n*/\r\n\r\n\r\nimport React from 'react'\r\n\r\n\r\nclass Dash extends React.Component{\r\n\r\n  render(){\r\n\r\n    return(\r\n      <div>Dashboard!! in class component</div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default Dash;","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getToDos, clearAlbums, getAlbums} from '../actions/albumActions'\r\nimport { fetchCustomers } from '../actions/customerActions'\r\n\r\nclass Album extends React.Component{\r\n\r\n\r\n    componentDidMount(){        \r\n        \r\n        this.props.getAlbums();\r\n        this.props.fetchCustomers();\r\n    }\r\n \r\n    constructor(props) {        \r\n        super(props);\r\n        this.state = {isToggleOn: true};\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick () {\r\n\r\n        if (this.state.isToggleOn){\r\n            this.props.getAlbums();\r\n        }else{\r\n            this.props.getToDos();\r\n        }\r\n\r\n        this.setState(state => ({\r\n          isToggleOn: !state.isToggleOn\r\n        }));\r\n    }\r\n\r\n    render (){\r\n        \r\n        const { albums, lista, loading, error} = this.props;\r\n        const { clearAlbums } = this.props;\r\n\r\n        if ( error ){\r\n            return <div>Error! {error.message}</div>\r\n        }\r\n\r\n        if ( loading ){\r\n            return <div>Loading...</div>\r\n        }\r\n\r\n\r\n        return(            \r\n            <div>\r\n            \r\n            \r\n            <ol>\r\n                {lista.map( x => \r\n                <li key={x.id}> {x.name}</li>\r\n                    )}\r\n            </ol>\r\n\r\n            <button onClick={clearAlbums}>limpia</button>\r\n\r\n            <button onClick={this.handleClick}>        {this.state.isToggleOn ? 'ON' : 'OFF'}      </button>\r\n\r\n            <ol>\r\n                {albums.map( x => \r\n                <li key={x.id}> {x.title}</li>\r\n                    )}\r\n            </ol>\r\n\r\n            \r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n}\r\n\r\n\r\nconst mapState = state => ({\r\n    albums: state.albums.items,\r\n    loading: state.albums.loading,\r\n    error: state.albums.error,\r\n   \r\n    lista: state.customers.items\r\n   \r\n});\r\n \r\n const mapDispatchs = { clearAlbums, getToDos, getAlbums, fetchCustomers }\r\n\r\nexport default connect(mapState, mapDispatchs)(Album);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getComentarios, clearComentarios } from '../actions/commentActions'\r\nimport { Button, Icon } from 'react-materialize'\r\n \r\nclass Comment extends React.Component{\r\n\r\n    componentDidMount(){\r\n        this.props.getComentarios();\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        const { comentarios, loading, error } = this.props;\r\n        const {clearComentarios } = this.props;\r\n\r\n\r\n        if (error){\r\n            return <div>Error! {error.message} </div>\r\n        }\r\n\r\n        if ( loading ){\r\n            return <div>Loading...</div>\r\n        }\r\n\r\n\r\n\r\n        return(\r\n            <div>\r\n         \r\n                <Button node=\"button\" waves=\"light\" onClick = {clearComentarios} > \r\n                    limpiar  <Icon right>cloud</Icon>\r\n                </Button>\r\n\r\n\r\n                <ol>\r\n                    { comentarios.map ( x =>\r\n                         <li> {x.name} ({ x.email })  </li> \r\n                    ) }\r\n                </ol>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapSate = state => ({\r\n    comentarios: state.comments.items,\r\n    loading: state.comments.loading,\r\n    error: state.comments.error\r\n});\r\n\r\nconst mapDispatchs = { getComentarios, clearComentarios}\r\n\r\nexport default connect (mapSate, mapDispatchs)(Comment);\r\n","import React, { Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getAlmacenes, addAlmacen, updateAlmacen, deleteAlmacen, setMode} from '../actions/almacenActions'\r\nimport { Table , TextInput, Button, Icon} from 'react-materialize'\r\nclass Almacen extends React.Component{\r\n\r\n    componentDidMount(){\r\n        this.props.getAlmacenes();\r\n    }\r\n\r\n    constructor (props ){\r\n        super(props);\r\n        this.state = { \r\n            id:'',\r\n            clave:'',\r\n            nombre:'',\r\n            area:''\r\n        };       \r\n    }\r\n\r\n\r\n    handleInputChange = (event) =>  {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n    }\r\n\r\n\r\n    guardar = (e) => {\r\n        \r\n        e.preventDefault();\r\n\r\n        if (this.props.mode == 'Nuevo'){\r\n            const reg = {\r\n                clave: this.state.clave,\r\n                nombre: this.state.nombre,\r\n                area: this.state.area\r\n    \r\n            }\r\n            this.props.addAlmacen(reg);\r\n        }else{\r\n\r\n            const reg = {\r\n                id: this.state.id,\r\n                clave: this.state.clave,\r\n                nombre: this.state.nombre,\r\n                area: this.state.area\r\n    \r\n            }\r\n            this.props.updateAlmacen(reg);\r\n            \r\n\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    \r\n\r\n    modoNuevo = ()  => {   \r\n        this.setState({ mode: 'R', clave:'', nombre:'', area:'', id:'' })     \r\n        this.props.setMode('Nuevo');     \r\n    }\r\n\r\n    cancelar = ()  => { \r\n         this.setState({ mode: 'R', clave:'', nombre:'', area:'', id:'' })     \r\n         this.props.setMode('R');\r\n    }\r\n\r\n    editar = (item) => {\r\n        this.setState({             \r\n            id: item.id,\r\n            clave: item.clave, \r\n            nombre: item.nombre, \r\n            area: item.area\r\n         });     \r\n        \r\n         this.props.setMode('Edit');\r\n\r\n    }\r\n\r\n    render(){\r\n        const { almacenes, loading, error, mode } = this.props;\r\n        const { deleteAlmacen } = this.props;\r\n\r\n        const modoRecorrido = mode === 'R';\r\n        \r\n\r\n        if ( error ){\r\n            return <div>Error! {error.message }  </div>\r\n        }\r\n\r\n        if ( loading ){\r\n            return <div>Loading...</div>\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n\r\n\r\n            hola: {mode}\r\n\r\n            {\r\n                modoRecorrido \r\n                ? (\r\n                    <Fragment>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th data-field=\"id\">Id</th>\r\n                                <th data-field=\"clave\">Clave</th>\r\n                                <th data-field=\"nombre\">Nombre</th>\r\n                                <th data-field=\"area\">Area </th>\r\n                                <th> </th>\r\n                            </tr>                        \r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                almacenes.map ( x => \r\n                                    <tr key={x.id}>\r\n                                        <td>{x.id}</td>\r\n                                        <td>{x.clave}</td>\r\n                                        <td>{x.nombre}</td>\r\n                                        <td>{x.area}</td>\r\n                                        <td> \r\n                                            <button onClick={() => this.editar(x)}>  editar </button>\r\n                                            <button onClick={() => deleteAlmacen(x.id)}>  eliminar </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n\r\n                    </Table>\r\n\r\n                    \r\n\r\n                    <Button node=\"button\" waves=\"light\" onClick = {this.modoNuevo} className=\"cyan darken-4\"> \r\n                        <Icon left>add_box</Icon> Nuevo    \r\n                    </Button>\r\n\r\n                    \r\n\r\n                    </Fragment>\r\n                ) \r\n                : (\r\n                    <Fragment>\r\n\r\n                        <form>\r\n                            <label>Clave</label>\r\n                            <input \r\n                                name=\"clave\"\r\n                                type=\"text\"\r\n                                value={this.state.clave}\r\n                                onChange ={this.handleInputChange}\r\n                                placeholder= \"Introduza la clave\"\r\n                            />\r\n                            <br />\r\n\r\n                            <label>Nombre</label>\r\n                            <TextInput \r\n                                name=\"nombre\"\r\n                                type=\"text\"\r\n                                value={this.state.nombre}\r\n                                onChange ={this.handleInputChange}\r\n                                placeholder= \"Introduza el nombre\"\r\n                            />\r\n                            <br />\r\n                            <label>Area</label>\r\n                            <input \r\n                                name=\"area\"\r\n                                type=\"text\"\r\n                                value={this.state.area}\r\n                                onChange ={this.handleInputChange}\r\n                                placeholder= \"Introduza el area en metros cuadrados\"\r\n                            />\r\n                            <br />\r\n                            \r\n                \r\n\r\n                            <Button node=\"button\" waves=\"light\" onClick = {this.guardar} className=\"light-blue darken-4\"> \r\n                                <Icon left>check</Icon> Guardar    \r\n                            </Button>\r\n\r\n                            <Button node=\"button\" waves=\"light\" onClick = {this.cancelar} className=\" light-blue darken-1\"> \r\n                                <Icon left>close</Icon> Cancelar   \r\n                            </Button>\r\n                            \r\n                        </form>\r\n                    </Fragment>\r\n\r\n                )\r\n            }\r\n            \r\n\r\n \r\n \r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n    \r\n} \r\n\r\nconst mapState = state => ({\r\n    almacenes: state.almacenes.items,\r\n    loading: state.almacenes.loading,\r\n    error: state.almacenes.error,\r\n    mode: state.almacenes.mode\r\n})\r\n\r\nconst mapDispatch = { getAlmacenes, addAlmacen, updateAlmacen, deleteAlmacen, setMode }\r\n\r\nexport default connect (mapState, mapDispatch)(Almacen);\r\n\r\n\r\n\r\n///reac-forms-materialize\r\n//https://www.npmjs.com/package/react-forms-materialize-css\r\n\r\n//https://rosolutions.com.mx/blog/index.php/2018/07/19/consumir-api-con-react-redux/\r\n\r\n","import React from 'react';\nimport { NavItem, Navbar, Icon} from 'react-materialize'\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Home from './components/home'\nimport About from './components/about'\nimport Dash from './components/dash'\nimport Album from './containers/Album'\nimport Comment from './containers/Comment'\nimport Almacen from './containers/Almacen'\n\nfunction App() {\n  return (\n    <Router>\n    <React.Fragment>\n  \n        <Navbar alignLinks=\"right\"   \n                brand={<a className=\"brand-logo\" href=\"#\">Logo</a>}   \n                menuIcon={<Icon>menu</Icon>}\n                options={{ draggable: true,    edge: 'left',    inDuration: 250,    onCloseEnd: null,    onCloseStart: null,    onOpenEnd: null,    onOpenStart: null,    outDuration: 200,    preventScrolling: true  }}\n                className=\"teal darken-4\"\n        >\n            <NavItem href=\"/\">Home</NavItem>\n            <NavItem href=\"/albums\">Albums</NavItem>\n            <NavItem href=\"/comments\">Comentarios</NavItem>\n            <NavItem href=\"/almacenes\">Almacenes</NavItem>\n            <NavItem href=\"/about\">About</NavItem>\n            <NavItem href=\"/dashboard\">Dashboadr</NavItem>\n        </Navbar>\n\n        <section className=\"body\">                    \n            <Switch>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                <Route path=\"/about\">\n                    <About />\n                </Route>\n                <Route path=\"/dashboard\">\n                    <Dash />\n                </Route>\n\n                <Route path=\"/albums\">\n                    <Album />\n                </Route>\n\n                <Route path=\"/almacenes\">\n                    <Almacen />\n                </Route>\n\n\n                <Route path=\"/comments\">\n                    <Comment />\n                </Route>\n            </Switch>\n        </section>\n        \n        \n    </React.Fragment>\n    </Router>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport reducer from './reducers'\n\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(thunk)\n)\n\n\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,    \n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}